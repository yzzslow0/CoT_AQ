{"version":3,"sources":["assets/Script/Game.js"],"names":["cc","Class","extends","Component","properties","chessPrefab","default","type","Prefab","chessList","node","whiteSpriteFrame","SpriteFrame","blackSpriteFrame","touchChess","Node","visible","the_last_touchChess","btn_test","Button","isDestory","Boolean","onLoad","i","self","isMove","y","x","newNode","instantiate","addChild","setPosition","p","zIndex","tag","push","getComponent","game","on","EventType","TOUCH_START","event","setChess","TOUCH_END","isDestoryfunction","TOUCH_MOVE","delta","touch","getDelta","Sprite","spriteFrame","update","dt","btn_test_func","newNode_onClick","console","log","test_label","getComponentInChildren","Label","string","destoryChess","other","pzChess","notdestoryChess","destroy"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;;AAERC,qBAAa,EAAC;AACVC,qBAAS,IADA;AAETC,kBAAMP,GAAGQ;AAFA,SAFL;;AAORC,mBAAW,EAAC;AACRH,qBAAS,EADF;AAEPC,kBAAM,CAACP,GAAGU,IAAJ;AAFC,SAPH;;AAYRC,0BAAkB,EAAC;;;AAGfL,qBAAS,IAHK;AAIdC,kBAAMP,GAAGY;AAJK,SAZV;AAkBRC,0BAAkB,EAAC;AACfP,qBAAS,IADK;AAEdC,kBAAMP,GAAGY;AAFK,SAlBV;AAsBRE,oBAAY,EAAC;AACTR,qBAAS,IADD;AAERC,kBAAMP,GAAGe,IAFD;AAGRC,qBAAS,KAHD,CAGM;AAHN,SAtBJ;AA2BRC,6BAAqB;AACjBX,qBAAS,IADQ;AAEjBC,kBAAMP,GAAGe,IAFQ;AAGjBC,qBAAS,KAHQ,CAGH;AAHG,SA3Bb;AAgCRE,kBAAUlB,GAAGmB,MAhCL;AAiCRC,mBAAWpB,GAAGqB;;AAjCN,KAHP;;AAwCL;AACAC,YAAQ,kBAAY;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;AAGA,YAAIC,IAAI,CAAR;AACA,YAAIC,OAAO,IAAX;AACA,YAAIC,SAAS,KAAb;AACA;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxB,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AACxB,oBAAIC,UAAU5B,GAAG6B,WAAH,CAAe,KAAKxB,WAApB,CAAd,CADwB,CACuB;AAC/C,qBAAKK,IAAL,CAAUoB,QAAV,CAAmBF,OAAnB;AACAA,wBAAQG,WAAR,CAAoB/B,GAAGgC,CAAH,CAAK,CAACL,IAAI,CAAL,IAAU,GAAV,GAAgB,GAArB,EAA0B,CAACD,IAAI,CAAL,IAAU,GAAV,GAAgB,GAA1C,CAApB,EAHwB,CAG4C;;AAEpEE,wBAAQK,MAAR,GAAiB,CAAjB,CALwB,CAKL;AACnB;AACAL,wBAAQM,GAAR,GAAcX,CAAd;;AAEA,qBAAKd,SAAL,CAAe0B,IAAf,CAAoBP,OAApB;AACAA,wBAAQQ,YAAR,CAAqB,IAArB,EAA2BC,IAA3B,GAAkC,IAAlC;AACA;AACAT,wBAAQU,EAAR,CAAWtC,GAAGe,IAAH,CAAQwB,SAAR,CAAkBC,WAA7B,EAA0C,UAAUC,KAAV,EAAiB;AACvD,yBAAKR,MAAL,GAAc,GAAd,CADuD,CACrC;AAClBT,yBAAKV,UAAL,GAAkB,IAAlB;AACAU,yBAAKJ,SAAL,GAAiB,KAAjB;AACAI,yBAAKkB,QAAL;;AAGA;AACA,wBAAIlB,KAAKP,mBAAL,IAA4B,IAA5B,IAAoCO,KAAKV,UAAL,CAAgBoB,GAAhB,IAAuBV,KAAKP,mBAAL,CAAyBiB,GAAxF,EAA6F;AACzFT,iCAAS,IAAT;AACH;;AAED;AACA;AACA;AACA;AACH,iBAhBD;;AAkBAG,wBAAQU,EAAR,CAAWtC,GAAGe,IAAH,CAAQwB,SAAR,CAAkBI,SAA7B,EAAwC,UAAUF,KAAV,EAAiB;;AAErD,yBAAKR,MAAL,GAAc,CAAd,CAFqD,CAErC;;AAEhBT,yBAAKP,mBAAL,GAA2B,IAA3B;AACAO,yBAAKP,mBAAL,CAAyBiB,GAAzB,GAA+BV,KAAKV,UAAL,CAAgBoB,GAA/C,CALqD,CAKF;AACnDT,6BAAS,KAAT;;AAEAD,yBAAKoB,iBAAL;;AAGA;AACA;AACA;;;AAGA;AACA;AACH,iBAlBD;;AAoBA;AACAhB,wBAAQU,EAAR,CAAWtC,GAAGe,IAAH,CAAQwB,SAAR,CAAkBM,UAA7B,EAAyC,UAAUJ,KAAV,EAAiB;AACtD;AACA,wBAAIhB,MAAJ,EAAY;AACR,4BAAIqB,QAAQL,MAAMM,KAAN,CAAYC,QAAZ,EAAZ;AACA,6BAAKrB,CAAL,IAAUmB,MAAMnB,CAAhB;AACA,6BAAKD,CAAL,IAAUoB,MAAMpB,CAAhB;AACH;AACD;AACA;AACA;AACH,iBAVD;AAWA,qBAAKjB,SAAL,CAAec,CAAf,EAAkBa,YAAlB,CAA+BpC,GAAGiD,MAAlC,EAA0CC,WAA1C,GAAwD,KAAKvC,gBAA7D;AACAY;AACH;AACD;AACH;AACD;;AAEA;AACA;;AAIH,KA/II;AAgJL;AACA4B,YAAQ,gBAAUC,EAAV,EAAc;AAClB,aAAKlC,QAAL,CAAcR,IAAd,CAAmB4B,EAAnB,CAAsBtC,GAAGe,IAAH,CAAQwB,SAAR,CAAkBC,WAAxC,EAAqD,KAAKa,aAA1D,EAAyE,IAAzE;AACH,KAnJI;;AAuJLC,qBAAiB,2BAAY;AACzBC,gBAAQC,GAAR,CAAY5B,QAAQM,GAApB;AACA;AACH,KA1JI;;AA+JLQ,cAAU,oBAAY;AAClBa,gBAAQC,GAAR,CAAY,KAAK1C,UAAL,CAAgBoB,GAA5B;;AAIA,YAAIuB,aAAa,KAAK3C,UAAL,CAAgB4C,sBAAhB,CAAuC1D,GAAG2D,KAA1C,CAAjB;AACA,YAAIF,WAAWG,MAAX,IAAqB,GAAzB,EAA8B;AAC1BH,uBAAWG,MAAX,GAAoB,GAApB;AACH,SAFD,MAEO;AACHH,uBAAWG,MAAX,GAAoB,GAApB;AACH;;AAED;;AAGH,KA9KI;AA+KLP,mBAAe,uBAAUZ,KAAV,EAAiB;AAC5B,aAAKL,YAAL,CAAkBpC,GAAG2D,KAArB,EAA4BC,MAA5B,GAAqC,KAArC;AACH,KAjLI;;AAmLLC,kBAAc,sBAAUC,KAAV,EAAgBtC,IAAhB,EAAsB;AAChC,aAAKJ,SAAL,GAAiB,IAAjB;AACA,YAAG,KAAKN,UAAL,CAAgBoB,GAAhB,IAAuB4B,MAAMpD,IAAN,CAAWwB,GAArC,EAAyC;AACrC,iBAAK6B,OAAL,GAAevC,KAAKd,IAApB;AACH,SAFD,MAEK;AACD,iBAAKqD,OAAL,GAAeD,MAAMpD,IAArB;AACH;AACD;AACH,KA3LI;;AA6LLsD,qBAAiB,yBAAUF,KAAV,EAAgBtC,IAAhB,EAAsB;AACnC,aAAKJ,SAAL,GAAiB,KAAjB;AACH,KA/LI;;AAiMLwB,uBAAmB,6BAAY;AAC3B,YAAI,KAAKxB,SAAT,EAAoB;AAChBpB,eAAGwD,GAAH,CAAO,IAAP;AACF,iBAAKO,OAAL,CAAaE,OAAb;AACD,SAHD,MAGO;AACHjE,eAAGwD,GAAH,CAAO,KAAP;AAEH;AACJ;AACD;AACA;;AAEA;AA7MK,CAAT","file":"unknown","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        chessPrefab: {//棋子的预制资源\n            default: null,\n            type: cc.Prefab\n        },\n\n        chessList: {//棋子节点的集合，用一维数组表示二维位置\n            default: [],\n            type: [cc.node]\n        },\n\n        whiteSpriteFrame: {//棋的图片\n\n\n            default: null,\n            type: cc.SpriteFrame\n        },\n        blackSpriteFrame: {//wu棋的图片\n            default: null,\n            type: cc.SpriteFrame\n        },\n        touchChess: {//每一回合点击的棋子\n            default: null,\n            type: cc.Node,\n            visible: false//属性窗口不显示\n        },\n        the_last_touchChess: {\n            default: null,\n            type: cc.Node,\n            visible: false//属性窗口不显示\n        },\n        btn_test: cc.Button,\n        isDestory: cc.Boolean\n\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        // isDestory =false;\n        // var key1 = '动态key1';\n        // var key2 = '动态key2';\n        // var map = {};\n        // map[key1] = 1;\n        // map[key2] = 2;\n\n        // console.log(map[key1]);//结果是1.\n        // console.log(map[key2]);//结果是2.\n\n        // //如果遍历map\n        // for(var prop in map){\n        //     if(map.hasOwnProperty(prop)){\n        //         console.log('key is ' + prop +' and value is' + map[prop]);\n        //     }\n        // }\n\n        \n\n        /**\n         * 创建棋子\n         */\n        var i = 0;\n        var self = this;\n        var isMove = false;\n        //初始化棋盘上225个棋子节点，并为每个节点添加事件\n        for (var y = 0; y < 4; y++) {\n            for (var x = 0; x < 8; x++) {\n                var newNode = cc.instantiate(this.chessPrefab);//复制Chess预制资源\n                this.node.addChild(newNode);\n                newNode.setPosition(cc.p((x + 5) * 105 - 890, (y + 2) * 110 - 370));//根据棋盘和棋子大小计算使每个棋子节点位于指定位置\n\n                newNode.zIndex = 1;//层级管理   \n                // newNode.group = \"default\"\n                newNode.tag = i;\n\n                this.chessList.push(newNode);\n                newNode.getComponent('PZ').game = this;\n                //   newNode.on(cc.Node.EventType.TOUCH_END, this.newNode_onClick,this)\n                newNode.on(cc.Node.EventType.TOUCH_START, function (event) {\n                    this.zIndex = 100;//层级管理   \n                    self.touchChess = this;\n                    self.isDestory = false;\n                    self.setChess();\n\n\n                    //判断如果第一次点击与想要拖动的棋子为同一个 则允许拖动\n                    if (self.the_last_touchChess != null && self.touchChess.tag == self.the_last_touchChess.tag) {\n                        isMove = true;\n                    }\n\n                    //   this.label.string = '123321'\n                    //   newNode.addChild(label)\n                    // this.chessList[i].getComponent(cc.Sprite).spriteFrame = this.blackSpriteFrame;\n                    // cc.log('TOUCH_START:' + isMove)\n                });\n\n                newNode.on(cc.Node.EventType.TOUCH_END, function (event) {\n\n                    this.zIndex = 1;//层级管理       \n\n                    self.the_last_touchChess = this;\n                    self.the_last_touchChess.tag = self.touchChess.tag;// 赋值tag\n                    isMove = false;\n\n                    self.isDestoryfunction();\n\n\n                    // if(this.isDestory){\n                    //     cc.log('销毁');\n                    // }\n\n\n                    // cc.log('TOUCH_END:' + isMove)\n                    // cc.log(\"Node zIndex: \" + this.zIndex);\n                });\n\n                // newNode.on(cc.Node.EventType.TOUCH_END,this.newNode_onClick,this)\n                newNode.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\n                    // cc.log('TOUCH_MOVE:' + isMove)\n                    if (isMove) {\n                        var delta = event.touch.getDelta();\n                        this.x += delta.x;\n                        this.y += delta.y;\n                    }\n                    // console.log('deltax:'+delta.x+'----'+'deltay:'+delta.y);\n                    // console.log('this.x:'+this.x+'----'+' this.y:'+this.y);\n                    // console.log('deltax:' + delta.x + '----' + 'deltay:' + delta.y)\n                })\n                this.chessList[i].getComponent(cc.Sprite).spriteFrame = this.whiteSpriteFrame;\n                i++;\n            }\n            //   console.log(this.chessList.size)\n        }\n        // this.btn_test.node.on(cc.Node.EventType.TOUCH_END,function(event){\n\n        //     this.getComponent(cc.Label).string ='123'\n        // });\n\n\n\n    },\n    // called every frame\n    update: function (dt) {\n        this.btn_test.node.on(cc.Node.EventType.TOUCH_START, this.btn_test_func, this)\n    },\n\n\n\n    newNode_onClick: function () {\n        console.log(newNode.tag)\n        //  this.chessList[i].getComponent(cc.Sprite).spriteFrame = this.blackSpriteFrame;\n    },\n\n\n\n\n    setChess: function () {\n        console.log(this.touchChess.tag)\n\n\n\n        var test_label = this.touchChess.getComponentInChildren(cc.Label);\n        if (test_label.string == '士') {\n            test_label.string = '卒'\n        } else {\n            test_label.string = '士'\n        }\n\n        //  this.chessList[this.touchChess.tag].getComponent(cc.Sprite).spriteFrame = this.blackSpriteFrame;\n\n\n    },\n    btn_test_func: function (event) {\n        this.getComponent(cc.Label).string = '123'\n    },\n\n    destoryChess: function (other,self) {\n        this.isDestory = true;\n        if(this.touchChess.tag == other.node.tag){\n            this.pzChess = self.node;\n        }else{\n            this.pzChess = other.node;\n        }\n        // this.pzChess = other;\n    },\n\n    notdestoryChess: function (other,self) {\n        this.isDestory = false;\n    },\n    \n    isDestoryfunction: function () {\n        if (this.isDestory) {\n            cc.log('销毁')\n          this.pzChess.destroy();\n        } else {\n            cc.log('不销毁')\n         \n        }\n    }\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}