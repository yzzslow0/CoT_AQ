{"version":3,"sources":["assets/Script/PZ.js"],"names":["cc","Class","extends","Component","properties","game","default","serializable","onLoad","manager","director","getCollisionManager","enabled","onCollisionEnter","other","self","destoryChess","onCollisionStay","onCollisionExit","notdestoryChess"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AAXE,KAHP;;AAoBL;AACAC,YAAQ,kBAAY;AAChB;;;AAGA;AACA,YAAIC,UAAUT,GAAGU,QAAH,CAAYC,mBAAZ,EAAd;AACA;AACAF,gBAAQG,OAAR,GAAkB,IAAlB;AACA;AACA;AACA;AACA;;AAEA;AACH,KAnCI;AAoCL;;;;;AAKAC,sBAAkB,0BAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACrC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEC,aAAKV,IAAL,CAAUW,YAAV,CAAuBF,KAAvB,EAA6BC,IAA7B;AACJ,KAhEI;;AAoEL;;;;;AAKAE,qBAAiB,yBAAUH,KAAV,EAAiBC,IAAjB,EAAuB;AACpC;;AAEH,KA5EI;;AA8EL;;;;;AAKAG,qBAAiB,yBAAUJ,KAAV,EAAgBC,IAAhB,EAAsB;AACnC;AACA,aAAKV,IAAL,CAAUc,eAAV,CAA0BL,KAA1B,EAAgCC,IAAhC;AACH;;AAED;AACA;;AAEA;AA3FK,CAAT","file":"unknown","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        game: {\n            default: null,\n            serializable: false\n        }\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        /**\n               * 碰撞相关\n               */\n        //获取碰撞检测系统\n        var manager = cc.director.getCollisionManager();\n        //开启碰撞检测系统\n        manager.enabled = true;\n        // //debug 绘制\n        // manager.enabledDebugDraw = true;\n        // //绘制包围盒\n        // manager.enabledDrawBoundingBox = true;\n\n        // PzTouchChess = getComponent('Star').game = this;\n    },\n    /**\n  * 当碰撞产生的时候调用\n  * @param  {Collider} other 产生碰撞的另一个碰撞组件\n  * @param  {Collider} self  产生碰撞的自身的碰撞组件\n  */\n    onCollisionEnter: function (other, self) {\n        // console.log('on collision enter');\n\n        // // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面\n        // var world = self.world;\n\n        // // 碰撞组件的 aabb 碰撞框\n        // var aabb = world.aabb;\n\n        // // 上一次计算的碰撞组件的 aabb 碰撞框\n        // var preAabb = world.preAabb;\n\n        // // 碰撞框的世界矩阵\n        // var t = world.transform;\n\n        // // 以下属性为圆形碰撞组件特有属性\n        // var r = world.radius;\n        // var p = world.position;\n\n        // // 以下属性为 矩形 和 多边形 碰撞组件特有属性\n        // var ps = world.points;\n\n         this.game.destoryChess(other,self);\n    },\n\n\n\n    /**\n     * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\n     */\n    onCollisionStay: function (other, self) {\n        // console.log('on collision stay');\n       \n    },\n\n    /**\n     * 当碰撞结束后调用\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\n     */\n    onCollisionExit: function (other,self) {\n        // console.log('on collision exit');\n        this.game.notdestoryChess(other,self);\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});"]}