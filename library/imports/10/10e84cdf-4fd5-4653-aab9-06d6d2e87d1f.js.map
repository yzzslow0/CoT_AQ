{"version":3,"sources":["assets/Script/Game.js"],"names":["cc","Class","extends","Component","properties","chessPrefab","default","type","Prefab","chessList","node","whiteSpriteFrame","SpriteFrame","blackSpriteFrame","touchChess","Node","visible","the_last_touchChess","btn_test","Button","onLoad","i","self","isMove","y","x","newNode","instantiate","addChild","setPosition","p","tag","push","on","EventType","TOUCH_START","event","setChess","console","log","TOUCH_END","TOUCH_MOVE","delta","touch","getDelta","getComponent","Sprite","spriteFrame","update","dt","btn_test_func","newNode_onClick","test_label","getComponentInChildren","Label","string","getName"],"mappings":"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","file":"unknown","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n        chessPrefab: {//棋子的预制资源\n            default: null,\n            type: cc.Prefab\n        },\n\n        chessList: {//棋子节点的集合，用一维数组表示二维位置\n            default: [],\n            type: [cc.node]\n        },\n\n        whiteSpriteFrame: {//棋的图片\n\n            \n            default: null,\n            type: cc.SpriteFrame\n        },\n        blackSpriteFrame: {//wu棋的图片\n            default: null,\n            type: cc.SpriteFrame\n        },\n        touchChess: {//每一回合点击的棋子\n            default: null,\n            type: cc.Node,\n            visible: false//属性窗口不显示\n        },\n        the_last_touchChess: {\n            default: null,\n            type: cc.Node,\n            visible: false//属性窗口不显示\n        },\n        btn_test: cc.Button,\n\n    },\n\n    // use this for initialization\n    onLoad: function () {\n\n        // var key1 = '动态key1';\n        // var key2 = '动态key2';\n        // var map = {};\n        // map[key1] = 1;\n        // map[key2] = 2;\n\n        // console.log(map[key1]);//结果是1.\n        // console.log(map[key2]);//结果是2.\n\n        // //如果遍历map\n        // for(var prop in map){\n        //     if(map.hasOwnProperty(prop)){\n        //         console.log('key is ' + prop +' and value is' + map[prop]);\n        //     }\n        // }\n\n\n        var i = 0;\n        var self = this;\n        var isMove = false;\n        //初始化棋盘上225个棋子节点，并为每个节点添加事件\n        for (var y = 0; y < 4; y++) {\n            for (var x = 0; x < 8; x++) {\n                var newNode = cc.instantiate(this.chessPrefab);//复制Chess预制资源\n                this.node.addChild(newNode);\n                newNode.setPosition(cc.p((x + 5) * 105 - 890, (y + 2) * 110 - 370));//根据棋盘和棋子大小计算使每个棋子节点位于指定位置\n\n                newNode.tag = i;\n\n                this.chessList.push(newNode);\n\n                //   newNode.on(cc.Node.EventType.TOUCH_END, this.newNode_onClick,this)\n                newNode.on(cc.Node.EventType.TOUCH_START, function (event) {\n\n                    self.touchChess = this;\n                    self.setChess();\n\n                    //判断如果第一次点击与想要拖动的棋子为同一个 则允许拖动\n                    if (self.the_last_touchChess != null && self.touchChess.tag == self.the_last_touchChess.tag) {\n                        isMove = true;\n                    }\n\n                    //   this.label.string = '123321'\n                    //   newNode.addChild(label)\n                    // this.chessList[i].getComponent(cc.Sprite).spriteFrame = this.blackSpriteFrame;\n                    console.log('TOUCH_START:' + isMove)\n                });\n\n                newNode.on(cc.Node.EventType.TOUCH_END, function (event) {\n                    self.the_last_touchChess = this;\n                    self.the_last_touchChess.tag = self.touchChess.tag;// 赋值tag\n                    isMove = false;\n                    console.log('TOUCH_END:' + isMove)\n                });\n                // newNode.on(cc.Node.EventType.TOUCH_END,this.newNode_onClick,this)\n                newNode.on(cc.Node.EventType.TOUCH_MOVE, function (event) {\n                    console.log('TOUCH_MOVE:' + isMove)\n                    if (isMove) {\n                        var delta = event.touch.getDelta();\n                        this.x += delta.x;\n                        this.y += delta.y;\n                    }\n                    // console.log('deltax:'+delta.x+'----'+'deltay:'+delta.y);\n                    // console.log('this.x:'+this.x+'----'+' this.y:'+this.y);\n                    // console.log('deltax:' + delta.x + '----' + 'deltay:' + delta.y)\n                })\n                this.chessList[i].getComponent(cc.Sprite).spriteFrame = this.whiteSpriteFrame;\n                i++;\n            }\n            //   console.log(this.chessList.size)\n        }\n        // this.btn_test.node.on(cc.Node.EventType.TOUCH_END,function(event){\n\n        //     this.getComponent(cc.Label).string ='123'\n        // });\n\n\n\n    },\n    // called every frame\n    update: function (dt) {\n        this.btn_test.node.on(cc.Node.EventType.TOUCH_START, this.btn_test_func, this)\n    },\n\n\n\n    newNode_onClick: function () {\n        console.log(newNode.tag)\n        //  this.chessList[i].getComponent(cc.Sprite).spriteFrame = this.blackSpriteFrame;\n    },\n\n\n\n\n    setChess: function () {\n        console.log(this.touchChess.tag)\n\n\n        var test_label = this.touchChess.getComponentInChildren(cc.Label);\n        test_label.string = '士'\n        //  this.chessList[this.touchChess.tag].getComponent(cc.Sprite).spriteFrame = this.blackSpriteFrame;\n\n\n\n\n\n    },\n    btn_test_func: function (event) {\n        this.getComponent(cc.Label).string = '123'\n    },\n    getName: function () {\n        return 'test'\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}